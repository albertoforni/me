{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nimport { shallow, mount } from \"enzyme\";\nimport Nav from \"./Nav\";\nimport NavItem from \"./NavItem\";\nimport HamburgerMenu from \"./HamburgerMenu\";\nimport Button from \"../../common/components/Button\";\nimport DomDelayedUpdate from \"../../common/components/DomDelayedUpdate\";\nconst defaultProps = {\n  navItems: [{\n    icon: \"an icon\",\n    text: \"some text\"\n  }, {\n    icon: \"an icon\",\n    text: \"some text\"\n  }],\n  onNavItemClick: () => {},\n  selectedItem: -1\n};\nit(\"renders NavItems inside DomDelayedUpdate\", () => {\n  const navItems = [{\n    icon: \"an icon\",\n    text: \"some text\"\n  }, {\n    icon: \"an icon\",\n    text: \"some text\"\n  }];\n  const wrapper = shallow(__jsx(Nav, _extends({}, defaultProps, {\n    navItems: navItems\n  })));\n  const domDelayedUpdate = wrapper.find(DomDelayedUpdate);\n  expect(domDelayedUpdate.find(NavItem).length).toEqual(navItems.length);\n  const domDelayedUpdateProps = domDelayedUpdate.props();\n  expect(domDelayedUpdateProps.mountClass).toEqual(\"parentStartAnimation\");\n  expect(domDelayedUpdateProps.mountDelay).toEqual(150);\n  expect(domDelayedUpdateProps.shouldUpdate).toEqual(false);\n});\nit(\"calls the onNavItemClick with the new menu Index\", () => {\n  const aSpyFunc = jest.fn();\n  const wrapper = shallow(__jsx(Nav, _extends({}, defaultProps, {\n    onNavItemClick: aSpyFunc\n  })));\n  wrapper.find(NavItem).at(1).props().onNavItemClick();\n  expect(aSpyFunc).toHaveBeenCalledWith(1);\n});\nit(\"shows only the selectedNavItem\", () => {\n  const thisTestIcon = \"this test icon\";\n  const thisTestText = \"this test text\";\n  const navItems = [{\n    icon: \"an icon\",\n    text: \"some text\"\n  }, {\n    icon: \"an icon\",\n    text: \"some text\"\n  }, {\n    icon: thisTestIcon,\n    text: thisTestText\n  }];\n  const selectedItem = 2;\n  const wrapper = shallow(__jsx(Nav, _extends({}, defaultProps, {\n    navItems: navItems,\n    selectedItem: selectedItem\n  })));\n  expect(wrapper.find(NavItem).length).toEqual(3);\n  expect(wrapper.find(NavItem).at(selectedItem).props().icon).toEqual(thisTestIcon);\n  expect(wrapper.find(NavItem).at(selectedItem).props().text).toEqual(thisTestText);\n  expect(wrapper.find(NavItem).at(selectedItem).props().animationClasses.hideRoot).toEqual(\"\");\n  expect(wrapper.find(NavItem).at(0).props().animationClasses.hideRoot).toEqual(\"hideRoot\");\n  expect(wrapper.find(NavItem).at(1).props().animationClasses.hideRoot).toEqual(\"hideRoot\");\n});\ndescribe(\"navigation buttons\", () => {\n  it(\"calls onNavItemClick with the next index\", () => {\n    const aSpyFunc = jest.fn();\n    const nextItemIndex = 1;\n    const wrapper = shallow(__jsx(Nav, _extends({}, defaultProps, {\n      onNavItemClick: aSpyFunc,\n      selectedItem: 0\n    })));\n    wrapper.find(Button).at(1).props().onClick();\n    expect(aSpyFunc).toHaveBeenCalledWith(nextItemIndex);\n  });\n  it(\"calls onNavItemClick with the 0 if currentIndex is the last one\", () => {\n    const aSpyFunc = jest.fn();\n    const wrapper = shallow(__jsx(Nav, _extends({}, defaultProps, {\n      onNavItemClick: aSpyFunc,\n      selectedItem: 1\n    })));\n    wrapper.find(Button).at(1).props().onClick();\n    expect(aSpyFunc).toHaveBeenCalledWith(0);\n  });\n  it(\"calls onNavItemClick with the prev index\", () => {\n    const aSpyFunc = jest.fn();\n    const prevItemIndex = 0;\n    const wrapper = shallow(__jsx(Nav, _extends({}, defaultProps, {\n      onNavItemClick: aSpyFunc,\n      selectedItem: 1\n    })));\n    wrapper.find(Button).at(0).props().onClick();\n    expect(aSpyFunc).toHaveBeenCalledWith(prevItemIndex);\n  });\n  it(\"calls onNavItemClick with the last nav item when current index is 0\", () => {\n    const aSpyFunc = jest.fn();\n    const lastNavItemIndex = defaultProps.navItems.length - 1;\n    const wrapper = shallow(__jsx(Nav, _extends({}, defaultProps, {\n      onNavItemClick: aSpyFunc,\n      selectedItem: 0\n    })));\n    wrapper.find(Button).at(0).props().onClick();\n    expect(aSpyFunc).toHaveBeenCalledWith(lastNavItemIndex);\n  });\n});\ndescribe(\"hamburger menu\", () => {\n  it(\"doesnt show the hamburger menu if there are no active sections\", () => {\n    const wrapper = shallow(__jsx(Nav, _extends({}, defaultProps, {\n      selectedItem: -1\n    })));\n    expect(wrapper.find(HamburgerMenu).length).toEqual(1);\n    expect(wrapper.find(HamburgerMenu).props().show).toEqual(false);\n  });\n  it(\"shows the hamburger menu if there is an active section\", () => {\n    const wrapper = shallow(__jsx(Nav, _extends({}, defaultProps, {\n      selectedItem: 0\n    })));\n    expect(wrapper.find(HamburgerMenu).length).toEqual(1);\n    expect(wrapper.find(HamburgerMenu).props().show).toEqual(true);\n  });\n  it(\"calls onNavItemClick with index -1 after reseting DomDelayedUpdate\", () => {\n    const aSpyFunc = jest.fn();\n    const aDomDelayedUpdateSpyFn = jest.fn();\n    const wrapper = mount(__jsx(Nav, _extends({}, defaultProps, {\n      onNavItemClick: aSpyFunc,\n      selectedItem: 0\n    })));\n    wrapper.find(DomDelayedUpdate).node.reset = aDomDelayedUpdateSpyFn;\n    wrapper.find(HamburgerMenu).props().onClick();\n    expect(aSpyFunc).toHaveBeenCalledWith(-1);\n    expect(aDomDelayedUpdateSpyFn).toHaveBeenCalledWith();\n  });\n});","map":null,"metadata":{},"sourceType":"module"}