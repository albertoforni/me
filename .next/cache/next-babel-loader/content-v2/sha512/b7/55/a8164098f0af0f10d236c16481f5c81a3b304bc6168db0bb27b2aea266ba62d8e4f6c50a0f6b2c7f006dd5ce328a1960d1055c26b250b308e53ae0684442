{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { style, merge } from \"glamor\";\nimport { List, Colors } from \"../../common/style\";\nimport NavItem from \"./NavItem\";\nimport HamburgerMenu from \"./HamburgerMenu\";\nimport Button from \"../../common/components/Button\";\nimport DomDelayedUpdate from \"../../common/components/DomDelayedUpdate\";\nconst prevButtonStyle = style({\n  position: \"fixed\",\n  bottom: 10,\n  left: 10,\n  height: 40,\n  width: 40,\n  borderRadius: \"50%\",\n  border: `1px solid ${Colors.lightGray}`,\n  background: Colors.white,\n  outline: 0,\n  transition: \"all 150ms ease-out\",\n  transitionProperty: \"border-color, color\",\n  \":hover\": {\n    borderColor: Colors.green,\n    color: Colors.green\n  }\n});\nconst styles = {\n  menu: List.noStyle,\n  prevButton: prevButtonStyle,\n  nextButton: merge(prevButtonStyle, {\n    left: \"auto\",\n    right: 10\n  })\n};\nconst animationClasses = {\n  parentStartAnimation: \"parentStartAnimation\",\n  hideRoot: \"hideRoot\",\n  parentStopAnimation: \"parentStopAnimation\"\n};\n\nconst nextIndex = (items, currentIndex, onNavItemClick) => {\n  const length = items.length;\n  const nextItemIndex = currentIndex + 1;\n  onNavItemClick(nextItemIndex >= length ? 0 : nextItemIndex);\n};\n\nconst prevIndex = (items, currentIndex, onNavItemClick) => {\n  const prevItemIndex = currentIndex - 1;\n  onNavItemClick(prevItemIndex < 0 ? items.length - 1 : prevItemIndex);\n};\n\nclass Nav extends React.Component {\n  resetMenu() {\n    this.DomDelayedUpdate.reset();\n    this.props.onNavItemClick(-1);\n  }\n\n  render() {\n    const {\n      navItems,\n      onNavItemClick,\n      selectedItem\n    } = this.props;\n    return __jsx(\"nav\", null, __jsx(\"div\", null, __jsx(Button, {\n      onClick: () => prevIndex(navItems, selectedItem, onNavItemClick),\n      className: styles.prevButton.toString()\n    }, \"<\"), __jsx(Button, {\n      onClick: () => nextIndex(navItems, selectedItem, onNavItemClick),\n      className: styles.nextButton.toString()\n    }, \">\")), __jsx(HamburgerMenu, {\n      onClick: () => this.resetMenu(),\n      show: selectedItem !== -1\n    }), __jsx(DomDelayedUpdate, {\n      mountClass: animationClasses.parentStartAnimation,\n      mountDelay: 150,\n      shouldUpdate: this.props.selectedItem !== -1,\n      updateClass: animationClasses.parentStopAnimation,\n      ref: component => {\n        this.DomDelayedUpdate = component;\n      }\n    }, __jsx(\"ul\", {\n      className: styles.menu,\n      role: \"menubar\"\n    }, navItems.map((navItem, index) => __jsx(NavItem, _extends({}, navItem, {\n      animationClasses: _objectSpread(_objectSpread({}, animationClasses), {}, {\n        hideRoot: selectedItem !== -1 && selectedItem !== index ? animationClasses.hideRoot : \"\"\n      }),\n      navIndex: index,\n      onNavItemClick: () => onNavItemClick(index),\n      key: index,\n      disabled: selectedItem !== -1\n    }))))));\n  }\n\n}\n\nexport default Nav;","map":null,"metadata":{},"sourceType":"module"}