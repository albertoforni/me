{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nimport { shallow } from \"enzyme\";\nimport NavItem from \"./NavItem\";\nconst defaultProps = {\n  text: \"default text\",\n  icon: \"a default icon stream\",\n  navIndex: 1,\n  onNavItemClick: () => {},\n  animationClasses: {\n    parentStartAnimation: \"\",\n    hideRoot: \"\",\n    parentStopAnimation: \"\"\n  }\n};\nit(\"renders the menu text\", () => {\n  const someText = \"some text\";\n  const wrapper = shallow(__jsx(NavItem, _extends({}, defaultProps, {\n    text: someText\n  })));\n  expect(wrapper.find(\"span\").text()).toEqual(someText);\n});\nit(\"renders an icon\", () => {\n  const someText = \"some text\";\n  const anIcon = \"a default icon stream\";\n  const wrapper = shallow(__jsx(NavItem, _extends({}, defaultProps, {\n    text: someText,\n    icon: anIcon\n  })));\n  const iconProps = wrapper.find(\"img\").props();\n  expect(iconProps.src).toEqual(anIcon);\n  expect(iconProps.alt).toEqual(someText);\n});\nit(\"renders the aria-labelledby with same key as the menu text\", () => {\n  const anIndex = 23;\n  const wrapper = shallow(__jsx(NavItem, _extends({}, defaultProps, {\n    navIndex: anIndex\n  })));\n  expect(wrapper.find(`[aria-labelledby=\"menuLbl${anIndex}\"]`).length).toEqual(1);\n  expect(wrapper.find(`#menuLbl${anIndex}`).length).toEqual(1);\n});\nit(\"calls onMenuItemClick when button is clicked\", () => {\n  const aSpyFunc = jest.fn();\n  const wrapper = shallow(__jsx(NavItem, _extends({}, defaultProps, {\n    onNavItemClick: aSpyFunc\n  })));\n  wrapper.find(\"button\").simulate(\"click\");\n  expect(aSpyFunc).toHaveBeenCalled();\n});\nit(\"disables the click when disabled is passed in\", () => {\n  const aSpyFunc = jest.fn();\n  const wrapper = shallow(__jsx(NavItem, _extends({}, defaultProps, {\n    onNavItemClick: aSpyFunc,\n    disabled: true\n  })));\n  wrapper.find(\"button\").simulate(\"click\");\n  expect(aSpyFunc).not.toHaveBeenCalled();\n});","map":null,"metadata":{},"sourceType":"module"}